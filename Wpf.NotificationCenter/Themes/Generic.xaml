<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Wpf.NotificationCenter"
                    xmlns:converters="clr-namespace:Wpf.NotificationCenter.Converters"
                    xmlns:enums="clr-namespace:Wpf.NotificationCenter.Enums"
                    xmlns:notification="clr-namespace:Wpf.NotificationCenter.Notification">
<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <Style x:Key="TextBlockStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="5" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>
    <Style x:Key="BoldTextBlock" TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="MediumTextBlock" TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontWeight" Value="Medium" />
    </Style>

    <Duration x:Key="ExpandDuration">0:0:0.250</Duration>
    <Duration x:Key="CollapseDuration">0:0:0.100</Duration>

    <KeyTime x:Key="ExpandKeyTime">0:0:0.250</KeyTime>
    <KeyTime x:Key="CollapseKeyTime">0:0:0.100</KeyTime>

    <Style x:Key="BorderDropShadowStyle" TargetType="Border">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="15" Opacity="0.8" ShadowDepth="10" Direction="-90" RenderingBias="Quality" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NotificationTextStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="MaxWidth" Value="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}" />
        <Setter Property="MaxHeight" Value="{Binding AlertMaxHeight, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}" />
        <Setter Property="Text" Value="{Binding Text, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}" />
    </Style>

    <Style x:Key="MaterialDesignExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Visibility="{Binding ExpanderVisibility, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource ExpandKeyTime}" Value="180" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpandPathRotateTransform" Storyboard.TargetProperty="Angle">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource CollapseKeyTime}" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <materialDesign:PackIcon x:Name="ExpandPath"
                          Width="24"
                          Height="24"
                          Foreground="{TemplateBinding Foreground}"
                          Kind="ChevronDown"
                          Opacity="0.38"
                          RenderTransformOrigin="0.5 0.5">
                            <materialDesign:PackIcon.RenderTransform>
                                <RotateTransform x:Name="ExpandPathRotateTransform" />
                            </materialDesign:PackIcon.RenderTransform>
                        </materialDesign:PackIcon>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignHorizontalHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{Binding Path=(materialDesign:ExpanderAssist.HorizontalHeaderPadding), RelativeSource={RelativeSource AncestorType=notification:Notification, AncestorLevel=1}}"
                            HorizontalAlignment="Stretch"
                            Background="{TemplateBinding Background}">
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="16" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Grid.Column="0"
                                              VerticalAlignment="Center"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                            <ToggleButton x:Name="ExpanderButton"
                                          Grid.Column="2"
                                          Margin="5"
                                          VerticalAlignment="Center"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          RenderTransformOrigin="0.5 0.5">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=notification:Notification, AncestorLevel=1}}" Value="Up">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="180" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignVerticalHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{Binding Path=(materialDesign:ExpanderAssist.VerticalHeaderPadding), RelativeSource={RelativeSource AncestorType=notification:Notification, AncestorLevel=1}}" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="16" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <ToggleButton x:Name="ExpanderButton"
                            Grid.Row="0"
                            VerticalAlignment="Center"
                            Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            RenderTransformOrigin="0.5 0.5">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignExpanderToggleButton}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=notification:Notification, AncestorLevel=1}}" Value="Left">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="90" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding ExpandDirection, RelativeSource={RelativeSource AncestorType=notification:Notification, AncestorLevel=1}}" Value="Right">
                                                <Setter Property="RenderTransform">
                                                    <Setter.Value>
                                                        <RotateTransform Angle="-90" />
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>

                            <ContentPresenter Grid.Row="2"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Content}"
                                ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Notification Template -->
    <ControlTemplate x:Key="NotificationControlTemplate" TargetType="{x:Type notification:Notification}">
        <ControlTemplate.Resources>
            <converters:ExpanderRotateAngleConverter x:Key="ExpanderRotateAngleConverter" />
            <Style TargetType="materialDesign:PackIcon" BasedOn="{StaticResource {x:Type materialDesign:PackIcon}}">
                <Setter Property="Kind" Value="BellAlert" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding NotificationType, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}"
                                             Value="{x:Static enums:NotificationType.Warning}">
                        <Setter Property="Foreground" Value="DarkGoldenrod" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding NotificationType, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}"
                                             Value="{x:Static enums:NotificationType.Error}">
                        <Setter Property="Foreground" Value="Red" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding NotificationType, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}"
                                             Value="{x:Static enums:NotificationType.Information}">
                        <Setter Property="Foreground" Value="Blue" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding NotificationType, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}"
                                             Value="{x:Static enums:NotificationType.Success}">
                        <Setter Property="Foreground" Value="MediumSeaGreen" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ControlTemplate.Resources>
        <Border Margin="1 1 1 0"
                BorderBrush="{TemplateBinding BorderBrush}" 
                Width="Auto"
                BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="ExpansionStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition To="Expanded">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                       Storyboard.TargetProperty="Opacity"
                                       From="0"
                                       To="1"
                                       Duration="{DynamicResource ExpandDuration}" />
                                <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                       Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                       From="0"
                                       To="1"
                                       Duration="{DynamicResource ExpandDuration}">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                     Storyboard.TargetProperty="Visibility"
                                                     Duration="0:0:0">
                                    <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualTransition>
                        <VisualTransition To="Collapsed">
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                       Storyboard.TargetProperty="Opacity"
                                       From="1"
                                       To="0"
                                       Duration="{DynamicResource CollapseDuration}" />
                                <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                       Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                       From="1"
                                       To="0"
                                       Duration="{DynamicResource CollapseDuration}">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut" />
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                     Storyboard.TargetProperty="Visibility"
                                                     Duration="{DynamicResource CollapseDuration}">
                                    <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                                </ObjectAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Expanded">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                     Storyboard.TargetProperty="Opacity"
                                     To="1"
                                     Duration="0" />
                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                     Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                     To="1"
                                     Duration="0" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                   Storyboard.TargetProperty="Visibility"
                                                   Duration="0">
                                <DiscreteObjectKeyFrame KeyTime="0%" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ContentPanel"
                                     Storyboard.TargetProperty="Opacity"
                                     To="0"
                                     Duration="0" />
                            <DoubleAnimation Storyboard.TargetName="ContentSiteScaleTransform"
                                     Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                     To="0"
                                     Duration="0" />
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_Content"
                                                   Storyboard.TargetProperty="Visibility"
                                                   Duration="0">
                                <DiscreteObjectKeyFrame KeyTime="100%" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <DockPanel Background="{TemplateBinding Background}"
                       HorizontalAlignment="Left"
                       Width="{Binding AlertMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}"
                       >
                <ToggleButton Name="HeaderSite"
                              Background="{TemplateBinding materialDesign:ExpanderAssist.HeaderBackground}"
                              BorderThickness="0"
                              Content="{TemplateBinding Header}"
                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              Cursor="Hand"
                              DockPanel.Dock="Top"
                              Focusable="False"
                              Foreground="{TemplateBinding Foreground}"
                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              IsTabStop="False"
                              Opacity="0.87"
                              TextElement.FontSize="{TemplateBinding materialDesign:ExpanderAssist.HeaderFontSize}" />

                <Border Name="ContentSite"
                        Margin="2 0"
                        BorderThickness="0 1 0 0"
                        BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}"
                        HorizontalAlignment="Stretch"
                        >
                    <Border.LayoutTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="ContentSiteScaleTransform" />
                            <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=notification:Notification}, Converter={StaticResource ExpanderRotateAngleConverter}}" />
                        </TransformGroup>
                    </Border.LayoutTransform>
                    <Grid Name="ContentPanel"
                          Margin="0 0 0 0"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <Grid.LayoutTransform>
                            <RotateTransform Angle="{Binding Path=ExpandDirection, RelativeSource={RelativeSource AncestorType=notification:Notification}, Converter={StaticResource ExpanderRotateAngleConverter}, ConverterParameter=-1}" />
                        </Grid.LayoutTransform>

                        <ContentPresenter Name="PART_Content" HorizontalAlignment="Stretch"
                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    Focusable="False"
                                    Visibility="Collapsed" />

                    </Grid>
                </Border>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left" />
                <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignVerticalHeaderStyle}" />
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Left">
                <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right" />
                <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignVerticalHeaderStyle}" />
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Up">
                <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom" />
                <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}" />
            </Trigger>

            <Trigger Property="ExpandDirection" Value="Down">
                <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Top" />
                <Setter TargetName="HeaderSite" Property="Style" Value="{StaticResource MaterialDesignHorizontalHeaderStyle}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Notification Style -->
    <Style x:Key="NotificationStyle" TargetType="{x:Type notification:Notification}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Template" Value="{DynamicResource NotificationControlTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="materialDesign:ExpanderAssist.HeaderBackground" Value="Transparent" />
        <Setter Property="materialDesign:ExpanderAssist.HorizontalHeaderPadding" Value="10 2 0 2" />
    </Style>

    <Style TargetType="{x:Type local:NotificationCenter}">
        <Setter Property="Margin" Value="3" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0 0 0 1" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource BoldTextBlock}" />
                    </DataTemplate.Resources>
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <ContentControl Canvas.ZIndex="0" Content="{Binding }" FontWeight="Bold" FontSize="14" />
                        <local:NotificationCenterButton HorizontalAlignment="{Binding ButtonHorizontalAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}" 
                                                        Visibility="{Binding ShowNotificationCenterButton, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                        />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource BoldTextBlock}" />
                    </DataTemplate.Resources>
                    <Grid Background="Transparent">
                        <ContentControl Canvas.ZIndex="0" Content="{Binding }" FontWeight="Bold" FontSize="14" />
                        <!-- Toast Container -->
                        <Border x:Name="ToastContainer" HorizontalAlignment="{Binding ButtonHorizontalAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}"
                                Margin="4 0 0 4"
                        >
                            <Border.Style>
                                <Style TargetType="Border" BasedOn="{StaticResource BorderDropShadowStyle}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding DisplayNotes.Count, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}" Value="0">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <!-- Toast Items -->
                            <ItemsControl ItemsSource="{Binding DisplayNotes, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}"
                                          >
                                <ItemsControl.Resources>
                                    <Style TargetType="{x:Type notification:Notification}" BasedOn="{StaticResource NotificationStyle}">
                                        <Setter Property="Background" Value="Wheat" />
                                    </Style>
                                </ItemsControl.Resources>
                            </ItemsControl>
                        </Border>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:NotificationCenter}">
                    <ControlTemplate.Resources>
                        <Style TargetType="Border">
                            <Setter Property="BorderBrush"
                                    Value="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}" />
                            <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type local:NotificationCenter}}}" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="3*" />
                            <ColumnDefinition Width="1*" />
                            <!-- Portion of screen for notification -->
                        </Grid.ColumnDefinitions>
                        <ContentControl Grid.Row="0" Grid.ColumnSpan="2"
                                    Content="{TemplateBinding HeaderedContentControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" />
                        <ContentControl Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2"
                                        Content="{TemplateBinding HeaderedContentControl.Content}"
                                        ContentTemplate="{TemplateBinding HeaderedContentControl.ContentTemplate}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        VerticalContentAlignment="Stretch" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HeaderTextStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="FontWeight" Value="{Binding TitleWeight, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}}" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="CreatedOnStyle" TargetType="TextBlock" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="Visibility" Value="{Binding CreatedOnVisibility}" />
        <Setter Property="Margin" Value="0 0" />
        <Setter Property="FontSize" Value="8" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="Text" Value="{Binding CreatedOn, RelativeSource={RelativeSource AncestorType={x:Type notification:Notification}}, StringFormat='Created: {0}'}" />
    </Style>

    <Style x:Key="DeleteButtonStyle" TargetType="Button">
        <Style.Resources>
            <Style TargetType="materialDesign:PackIcon">
                <Setter Property="Kind" Value="RemoveBold" />
                <Setter Property="Foreground" Value="Red" />
            </Style>
        </Style.Resources>
        <Setter Property="Visibility" Value="{Binding ExpanderVisibility}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="ToolTip" Value="Remove Notification" />
    </Style>

    <Style TargetType="{x:Type notification:Notification}" BasedOn="{StaticResource NotificationStyle}" />
</ResourceDictionary>